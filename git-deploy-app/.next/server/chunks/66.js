"use strict";exports.id=66,exports.ids=[66],exports.modules={3066:(e,r,n)=>{n.d(r,{fromIni:()=>v});var t=n(6683),i=n(3145),o=n(7345);let s=(e,r,t)=>{let s={EcsContainer:async e=>{let{fromHttp:r}=await n.e(229).then(n.bind(n,9229)),{fromContainerMetadata:i}=await n.e(322).then(n.bind(n,1322));return t?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),(0,o.t)(r(e??{}),i(e))},Ec2InstanceMetadata:async e=>{t?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");let{fromInstanceMetadata:r}=await n.e(322).then(n.bind(n,1322));return r(e)},Environment:async e=>{t?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");let{fromEnv:r}=await n.e(626).then(n.bind(n,7626));return r(e)}};if(e in s)return s[e];throw new i.m(`Unsupported credential source in profile ${r}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:t})},a=(e,{profile:r="default",logger:n}={})=>!!e&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(l(e,{profile:r,logger:n})||d(e,{profile:r,logger:n})),l=(e,{profile:r,logger:n})=>{let t="string"==typeof e.source_profile&&void 0===e.credential_source;return t&&n?.debug?.(`    ${r} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),t},d=(e,{profile:r,logger:n})=>{let t="string"==typeof e.credential_source&&void 0===e.source_profile;return t&&n?.debug?.(`    ${r} isCredentialSourceProfile credential_source=${e.credential_source}`),t},c=async(e,r,o,a={})=>{o.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");let l=r[e];if(!o.roleAssumer){let{getDefaultRoleAssumer:e}=await n.e(61).then(n.bind(n,61));o.roleAssumer=e({...o.clientConfig,credentialProviderLogger:o.logger,parentClientConfig:o?.parentClientConfig},o.clientPlugins)}let{source_profile:d}=l;if(d&&d in a)throw new i.m(`Detected a cycle attempting to resolve credentials for profile ${(0,t.Jl)(o)}. Profiles visited: `+Object.keys(a).join(", "),{logger:o.logger});o.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${d?`source_profile=[${d}]`:`profile=[${e}]`}`);let c=d?m(d,{...r,[d]:{...r[d],role_arn:l.role_arn??r[d].role_arn}},o,{...a,[d]:!0}):(await s(l.credential_source,e,o.logger)(o))(),g={RoleArn:l.role_arn,RoleSessionName:l.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:l.external_id,DurationSeconds:parseInt(l.duration_seconds||"3600",10)},{mfa_serial:f}=l;if(f){if(!o.mfaCodeProvider)throw new i.m(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:o.logger,tryNextLink:!1});g.SerialNumber=f,g.TokenCode=await o.mfaCodeProvider(f)}let u=await c;return o.roleAssumer(u,g)},g=e=>!!e&&"object"==typeof e&&"string"==typeof e.credential_process,f=async(e,r)=>n.e(552).then(n.bind(n,5552)).then(({fromProcess:n})=>n({...e,profile:r})()),u=async(e,r={})=>{let{fromSSO:t}=await n.e(825).then(n.bind(n,6825));return t({profile:e,logger:r.logger})()},_=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),p=e=>!!e&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1,y=(e,r)=>(r?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials"),Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,credentialScope:e.aws_credential_scope})),w=e=>!!e&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1,b=async(e,r)=>n.e(765).then(n.bind(n,3765)).then(({fromTokenFile:n})=>n({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:r.roleAssumerWithWebIdentity,logger:r.logger,parentClientConfig:r.parentClientConfig})()),m=async(e,r,n,t={})=>{let o=r[e];if(Object.keys(t).length>0&&p(o))return y(o,n);if(a(o,{profile:e,logger:n.logger}))return c(e,r,n,t);if(p(o))return y(o,n);if(w(o))return b(o,n);if(g(o))return f(n,e);if(_(o))return await u(e,n);throw new i.m(`Could not resolve credentials using profile: [${e}] in configuration/credentials file(s).`,{logger:n.logger})},v=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");let r=await (0,t.MX)(e);return m((0,t.Jl)(e),r,e)}}};